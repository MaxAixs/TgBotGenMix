[33mcommit eeec0a87ddcd867d86b1b2966ef88801e30a8882[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mnew-main[m[33m, [m[1;31morigin/new-main[m[33m)[m
Author: Aix <Aix60689100@gmail.com>
Date:   Mon Sep 23 22:43:37 2024 +0300

    init commit

[1mdiff --git a/.idea/.gitignore b/.idea/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..13566b8[m
[1m--- /dev/null[m
[1m+++ b/.idea/.gitignore[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m# Default ignored files[m
[32m+[m[32m/shelf/[m
[32m+[m[32m/workspace.xml[m
[32m+[m[32m# Editor-based HTTP Client requests[m
[32m+[m[32m/httpRequests/[m
[32m+[m[32m# Datasource local storage ignored files[m
[32m+[m[32m/dataSources/[m
[32m+[m[32m/dataSources.local.xml[m
[1mdiff --git a/.idea/BotMixology.iml b/.idea/BotMixology.iml[m
[1mnew file mode 100644[m
[1mindex 0000000..5e764c4[m
[1m--- /dev/null[m
[1m+++ b/.idea/BotMixology.iml[m
[36m@@ -0,0 +1,9 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<module type="WEB_MODULE" version="4">[m
[32m+[m[32m  <component name="Go" enabled="true" />[m
[32m+[m[32m  <component name="NewModuleRootManager">[m
[32m+[m[32m    <content url="file://$MODULE_DIR$" />[m
[32m+[m[32m    <orderEntry type="inheritedJdk" />[m
[32m+[m[32m    <orderEntry type="sourceFolder" forTests="false" />[m
[32m+[m[32m  </component>[m
[32m+[m[32m</module>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/modules.xml b/.idea/modules.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..bf32a1e[m
[1m--- /dev/null[m
[1m+++ b/.idea/modules.xml[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="ProjectModuleManager">[m
[32m+[m[32m    <modules>[m
[32m+[m[32m      <module fileurl="file://$PROJECT_DIR$/.idea/BotMixology.iml" filepath="$PROJECT_DIR$/.idea/BotMixology.iml" />[m
[32m+[m[32m    </modules>[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/vcs.xml b/.idea/vcs.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..94a25f7[m
[1m--- /dev/null[m
[1m+++ b/.idea/vcs.xml[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="VcsDirectoryMappings">[m
[32m+[m[32m    <mapping directory="$PROJECT_DIR$" vcs="Git" />[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/BotMixology b/BotMixology[m
[1mnew file mode 100644[m
[1mindex 0000000..0184d59[m
Binary files /dev/null and b/BotMixology differ
[1mdiff --git a/client/telegram/client.go b/client/telegram/client.go[m
[1mnew file mode 100644[m
[1mindex 0000000..62a065d[m
[1m--- /dev/null[m
[1m+++ b/client/telegram/client.go[m
[36m@@ -0,0 +1,105 @@[m
[32m+[m[32mpackage telegram[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"BotMixology/events/telegram/buttons"[m
[32m+[m	[32m"BotMixology/lib/e"[m
[32m+[m	[32m"encoding/json"[m
[32m+[m	[32m"io"[m
[32m+[m	[32m"net/http"[m
[32m+[m	[32m"net/url"[m
[32m+[m	[32m"path"[m
[32m+[m	[32m"strconv"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mtype Client struct {[m
[32m+[m	[32mhost     string[m
[32m+[m	[32mbasePath string[m
[32m+[m	[32mclient   http.Client[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mconst ([m
[32m+[m	[32mgetUpdatesMethod  = "getUpdates"[m
[32m+[m	[32msendMessageMethod = "sendMessage"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mfunc NewClient(host string, token string) *Client {[m
[32m+[m	[32mreturn &Client{[m
[32m+[m		[32mhost:     host,[m
[32m+[m		[32mbasePath: newBasePath(token),[m
[32m+[m		[32mclient:   http.Client{},[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc newBasePath(token string) string {[m
[32m+[m	[32mreturn "bot" + token[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (c *Client) Updates(offset, limit int) ([]Update, error) {[m
[32m+[m	[32mq := url.Values{}[m
[32m+[m	[32mq.Add("offset", strconv.Itoa(offset))[m
[32m+[m	[32mq.Add("limit", strconv.Itoa(limit))[m
[32m+[m
[32m+[m	[32mdata, err := c.doRequest(getUpdatesMethod, q)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, e.Wrap("cant get updates", err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mvar res UpdateResponse[m
[32m+[m
[32m+[m	[32mif err := json.Unmarshal(data, &res); err != nil {[m
[32m+[m		[32mreturn nil, e.Wrap("cant unmarshal update response", err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn res.Result, nil[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (c *Client) SendMessage(chatID int, text string, replyMarkUp buttons.ReplyMarkUp) error {[m
[32m+[m	[32mq := url.Values{}[m
[32m+[m	[32mq.Add("chat_id", strconv.Itoa(chatID))[m
[32m+[m	[32mq.Add("text", text)[m
[32m+[m
[32m+[m	[32mreplyMarkUpJSON, err := json.Marshal(replyMarkUp)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn e.Wrap("cant marshal reply markup", err)[m
[32m+[m	[32m}[m
[32m+[m	[32mq.Add("reply_markup", string(replyMarkUpJSON))[m
[32m+[m
[32m+[m	[32m_, err = c.doRequest(sendMessageMethod, q)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn e.Wrap("cant send message", err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (c *Client) doRequest(method string, query url.Values) ([]byte, error) {[m
[32m+[m	[32mconst errMsg = "Cant do request"[m
[32m+[m	[32mu := url.URL{[m
[32m+[m		[32mScheme: "https",[m
[32m+[m		[32mHost:   c.host,[m
[32m+[m		[32mPath:   path.Join(c.basePath, method),[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreq, err := http.NewRequest(http.MethodGet, u.String(), nil)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, e.Wrap(errMsg, err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreq.URL.RawQuery = query.Encode()[m
[32m+[m
[32m+[m	[32mresp, err := c.client.Do(req)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, e.Wrap(errMsg, err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mdefer resp.Body.Close()[m
[32m+[m
[32m+[m	[32mbody, err := io.ReadAll(resp.Body)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, e.Wrap(errMsg, err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn body, nil[m
[32m+[m[32m}[m
[1mdiff --git a/client/telegram/type.go b/client/telegram/type.go[m
[1mnew file mode 100644[m
[1mindex 0000000..10fcbef[m
[1m--- /dev/null[m
[1m+++ b/client/telegram/type.go[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32mpackage telegram[m
[32m+[m
[32m+[m[32mtype UpdateResponse struct {[m
[32m+[m	[32mOk     bool     `json:"ok"`[m
[32m+[m	[32mResult []Update `json:"result"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype Update struct {[m
[32m+[m	[32mID            int              `json:"update_id"`[m
[32m+[m	[32mMessage       *IncomingMessage `json:"message"`[m
[32m+[m	[32mCallbackQuery *CallBackQuery   `json:"callback_query"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype IncomingMessage struct {[m
[32m+[m	[32mText string `json:"text"`[m
[32m+[m	[32mFrom From[m
[32m+[m	[32mChat Chat[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype From struct {[m
[32m+[m	[32mUsername string `json:"username"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype Chat struct {[m
[32m+[m	[32mID int `json:"id"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype CallBackQuery struct {[m
[32m+[m	[32mData    string           `json:"data"`[m
[32m+[m	[32mMessage *IncomingMessage `json:"message"`[m
[32m+[m[32m}[m
[1mdiff --git a/consumer/consumer.go b/consumer/consumer.go[m
[1mnew file mode 100644[m
[1mindex 0000000..cc51574[m
[1m--- /dev/null[m
[1m+++ b/consumer/consumer.go[m
[36m@@ -0,0 +1,5 @@[m
[32m+[m[32mpackage consumer[m
[32m+[m
[32m+[m[32mtype Consumer interface {[m
[32m+[m	[32mStart() error[m
[32m+[m[32m}[m
[1mdiff --git a/consumer/event-consumer/event-consumer.go b/consumer/event-consumer/event-consumer.go[m
[1mnew file mode 100644[m
[1mindex 0000000..b1f338a[m
[1m--- /dev/null[m
[1m+++ b/consumer/event-consumer/event-consumer.go[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mpackage event_consumer[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"BotMixology/events"[m
[32m+[m	[32m"log"[m
[32m+[m	[32m"time"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mtype Consumer struct {[m
[32m+[m	[32mfetcher   events.Fetcher[m
[32m+[m	[32mprocessor events.Processor[m
[32m+[m	[32mbathSize  int[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc NewConsumer(fetcher events.Fetcher, processor events.Processor, bathSize int) Consumer {[m
[32m+[m	[32mreturn Consumer{[m
[32m+[m		[32mfetcher:   fetcher,[m
[32m+[m		[32mprocessor: processor,[m
[32m+[m		[32mbathSize:  bathSize,[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (c Consumer) Start() error {[m
[32m+[m	[32mfor {[m
[32m+[m		[32mgotEvents, err := c.fetcher.Fetch(c.bathSize)[m
[32m+[m		[32mif err != nil {[m
[32m+[m			[32mlog.Printf("[ERR] consumer: %s", err.Error())[m
[32m+[m
[32m+[m			[32mcontinue[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif len(gotEvents) == 0 {[m
[32m+[m			[32mtime.Sleep(1 * time.Second)[m
[32m+[m
[32m+[m			[32mcontinue[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mif err := c.handleEvents(gotEvents); err != nil {[m
[32m+[m			[32mlog.Print(err)[m
[32m+[m
[32m+[m			[32mcontinue[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (c *Consumer) handleEvents(events []events.Event) error {[m
[32m+[m	[32mfor _, event := range events {[m
[32m+[m		[32mlog.Printf("got new event: %v", event.Text)[m
[32m+[m
[32m+[m		[32mif err := c.processor.Process(event); err != nil {[m
[32m+[m			[32mlog.Printf("Cant handle event: %v", err)[m
[32m+[m		[32m}[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[1mdiff --git a/events/telegram/buttons/buttons.go b/events/telegram/buttons/buttons.go[m
[1mnew file mode 100644[m
[1mindex 0000000..26d39de[m
[1m--- /dev/null[m
[1m+++ b/events/telegram/buttons/buttons.go[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32mpackage buttons[m
[32m+[m
[32m+[m[32mtype ReplyMarkUp struct {[m
[32m+[m	[32mInLineKeyBoard [][]InLineKeyBoardButton `json:"inline_keyboard"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype InLineKeyBoardButton struct {[m
[32m+[m	[32mText         string `json:"text"`[m
[32m+[m	[32mCallbackData string `json:"callback_data"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc CommandKeyboard() ReplyMarkUp {[m
[32m+[m	[32mreturn ReplyMarkUp{[m
[32m+[m		[32mInLineKeyBoard: [][]InLineKeyBoardButton{[m
[32m+[m			[32m{[m
[32m+[m				[32m{Text: "Добавить табак", CallbackData: "addTobacco"},[m
[32m+[m				[32m{Text: "Удалить табак", CallbackData: "deleteTobacco"},[m
[32m+[m			[32m},[m
[32m+[m			[32m{[m
[32m+[m				[32m{Text: "Добавить вкус", CallbackData: "addFlavor"},[m
[32m+[m				[32m{Text: "Удалить вкус", CallbackData: "deleteFlavor"},[m
[32m+[m			[32m},[m
[32m+[m			[32m{[m
[32m+[m				[32m{Text: "Показать каталог табака", CallbackData: "showTobaccoCatalog"},[m
[32m+[m			[32m},[m
[32m+[m		[32m},[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[1mdiff --git a/events/telegram/cmd_handlers.go b/events/telegram/cmd_handlers.go[m
[1mnew file mode 100644[m
[1mindex 0000000..8d5dd6f[m
[1m--- /dev/null[m
[1m+++ b/events/telegram/cmd_handlers.go[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32mpackage telegram[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"BotMixology/events/telegram/userState"[m
[32m+[m	[32m"BotMixology/storage"[m
[32m+[m	[32m"errors"[m
[32m+[m	[32m"fmt"[m
[32m+[m	[32m"strings"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mfunc (p *Processor) SetTbcName(state *userState.UserState, text string) error {[m
[32m+[m	[32mstate.TobaccoName = strings.TrimSpace(text)[m
[32m+[m
[32m+[m	[32mif p.storage.TobaccoExists(state.TobaccoName) {[m
[32m+[m		[32mreturn fmt.Errorf("табак с именем %s уже существует", state.TobaccoName)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc SetStrengthTbc(text string) (storage.Strength, error) {[m
[32m+[m	[32mstrength := storage.Strength(strings.TrimSpace(text))[m
[32m+[m
[32m+[m	[32mif !storage.IsValidStrength(strength) {[m
[32m+[m		[32mreturn strength, errors.New("invalid strength")[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn strength, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (p *Processor) ExistTbc(state *userState.UserState, text string) error {[m
[32m+[m	[32mstate.TobaccoName = strings.TrimSpace(text)[m
[32m+[m
[32m+[m	[32mif !p.storage.TobaccoExists(state.TobaccoName) {[m
[32m+[m		[32mreturn fmt.Errorf("табака с именем %s не сущестувет", state.TobaccoName)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn nil[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc SetFlavorName(state *userState.UserState, text string) {[m
[32m+[m	[32mstate.FlavorName = strings.TrimSpace(text)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc HandleFlavorType(text string) (storage.Flavors, error) {[m
[32m+[m	[32mflavors := storage.Flavors(strings.TrimSpace(text))[m
[32m+[m
[32m+[m	[32mif !storage.IsValidFlavorType(flavors) {[m
[32m+[m		[32mreturn flavors, errors.New("invalid flavor type")[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn flavors, nil[m
[32m+[m[32m}[m
[1mdiff --git a/events/telegram/commands.go b/events/telegram/commands.go[m
[1mnew file mode 100644[m
[1mindex 0000000..df04c9d[m
[1m--- /dev/null[m
[1m+++ b/events/telegram/commands.go[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32mpackage telegram[m
[32m+[m
[32m+[m[32mconst ([m
[32m+[m	[32mstartCmd           = "/start"[m
[32m+[m	[32maddTobacco         = "addTobacco"[m
[32m+[m	[32mdeleteTobacco      = "deleteTobacco"[m
[32m+[m	[32maddFlavor          = "addFlavor"[m
[32m+[m	[32mdeleteFlavor       = "deleteFlavor"[m
[32m+[m	[32mshowTobaccoCatalog = "showTobaccoCatalog"[m
[32m+[m[32m)[m
[1mdiff --git a/events/telegram/do_cmd.go b/events/telegram/do_cmd.go[m
[1mnew file mode 100644[m
[1mindex 0000000..08b5320[m
[1m--- /dev/null[m
[1m+++ b/events/telegram/do_cmd.go[m
[36m@@ -0,0 +1,191 @@[m
[32m+[m[32mpackage telegram[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"BotMixology/client/telegram"[m
[32m+[m	[32m"BotMixology/events/telegram/buttons"[m
[32m+[m	[32m"BotMixology/events/telegram/userState"[m
[32m+[m	[32m"fmt"[m
[32m+[m	[32m"log"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mfunc (p *Processor) doCmd(state *userState.UserState, text string, chatID int) error {[m
[32m+[m	[32mlog.Printf("Обработка команды: %s", text)[m
[32m+[m
[32m+[m	[32msendMsg := NewMessageSender(chatID, p.tg)[m
[32m+[m
[32m+[m	[32mif state.IsActive() {[m
[32m+[m		[32mreturn p.processState(state, text, sendMsg)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn p.processCommand(state, text, sendMsg)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (p *Processor) processState(state *userState.UserState, text string, sendMsg func(string, ...buttons.ReplyMarkUp) error) error {[m
[32m+[m	[32mhandler, exists := StateHandlers[state.State][m
[32m+[m	[32mif !exists {[m
[32m+[m		[32mreturn sendMsg(unknownCommand)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn handler(p, state, text, sendMsg)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc (p *Processor) processCommand(state *userState.UserState, text string, sendMsg func(string, ...buttons.ReplyMarkUp) error) error {[m
[32m+[m	[32mswitch text {[m
[32m+[m	[32mcase startCmd:[m
[32m+[m		[32mreturn sendMsg(msgStart, buttons.Comman